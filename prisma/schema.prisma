generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Region {
  id        String   @id @default(uuid())
  name      String   @unique
  users     User[]   
}

model Type {
  id         String   @id @default(uuid())
  name       String   @unique
  categories Category[] 
  createdAt  DateTime @default(now())
}

model Category {
  id         String   @id @default(uuid())
  name       String
  typeId     String
  type       Type      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  products   Product[] 
  createdAt  DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  star      Float   
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Product {
  id         String    @id @default(uuid())
  name       String
  price      Float
  img        String  
  description String?
  count      Int      
  skidka     Float?
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  colors     Color[]   @relation("ProductColors") 
  likes      Like[]    
  comments   Comment[] 
  orders     Order[]   
  createdAt  DateTime  @default(now())
  messages   Message[] @relation("ProductMessages")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String?
  firstname String?
  lastname  String?
  img       String?
  otp       String?
  verified  Boolean    @default(false)
  createdAt DateTime   @default(now())
  role      Role       @default(USER)

  regionId  String?  
  region    Region?    @relation(fields: [regionId], references: [id])

  products  Product[]  
  likes     Like[]     
  comments  Comment[]  
  orders    Order[]  

  messagesFrom Message[] @relation(name: "MessageFromUser")
  messagesTo   Message[] @relation(name: "MessageToUser")
}
enum Role {
  USER
  ADMIN
}

model Color {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[] @relation("ProductColors") 
  orders    Order[]  
  createdAt DateTime  @default(now())
}

model Order {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorId    String
  color      Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  count      Int      @default(1)
  createdAt  DateTime @default(now())
}

model Message {
  id         String   @id @default(uuid())
  text       String
  fromId     String
  from       User     @relation(name: "MessageFromUser", fields: [fromId], references: [id], onDelete: Cascade)

  toId       String
  to         User     @relation(name: "MessageToUser", fields: [toId], references: [id], onDelete: Cascade)

  productId  String
  product    Product  @relation(name: "ProductMessages", fields: [productId], references: [id], onDelete: Cascade)

  date       DateTime @default(now())
}


